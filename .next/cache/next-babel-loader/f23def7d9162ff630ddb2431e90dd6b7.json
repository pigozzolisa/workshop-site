{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lisapigozzo/Documents/GitHub/workshop-site1/src/Map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let {\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return /*#__PURE__*/React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: style,\n        ref: \"map\",\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), this.renderChildren()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\nexport default CurrentLocation;","map":{"version":3,"sources":["/Users/lisapigozzo/Documents/GitHub/workshop-site1/src/Map.js"],"names":["React","ReactDOM","CurrentLocation","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","mapStyles","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nexport class CurrentLocation extends React.Component {\n constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\nCurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: 1.2884,\n      lng: 36.8233\n    },\n    centerAroundCurrentLocation: false,\n    visible: true\n  };\nexport default CurrentLocation;"]},"metadata":{},"sourceType":"module"}